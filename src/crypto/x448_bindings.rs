/* automatically generated by rust-bindgen */

pub const KEY_LEN: usize = 56;

type ResultType = i32;
pub const _SUCCESS: ResultType = -1;
pub const FAILURE: ResultType = 0;

extern "C" {
    pub fn x448_int(out: *mut u8, base: *const u8, scalar: *const u8) -> ResultType;
}
extern "C" {
    pub fn x448_derive_public_key(out: *mut u8, scalar: *const u8);
}

#[cfg(test)]
mod tests {
    use super::*;
    #[test]
    // test vector from RFC 7748, section 6.2
    fn rfc_test_vector() {
        // constants from RFC
        let sk_alice = hex::decode(
            "9a8f4925d1519f5775cf46b04b5800d4ee9ee8bae8bc5565d498c28dd9c9baf574a9419744897391006382a6f127ab1d9ac2d8c0a598726b"
        )
        .unwrap();
        let pk_alice = hex::decode(
            "9b08f7cc31b7e3e67d22d5aea121074a273bd2b83de09c63faa73d2c22c5d9bbc836647241d953d40c5b12da88120d53177f80e532c41fa0"
        )
        .unwrap();
        let sk_bob = hex::decode(
            "1c306a7ac2a0e2e0990b294470cba339e6453772b075811d8fad0d1d6927c120bb5ee8972b0d3e21374c9c921b09d1b0366f10b65173992d"
        )
        .unwrap();
        let pk_bob = hex::decode(
            "3eb7a829b0cd20f5bcfc0b599b6feccf6da4627107bdb0d4f345b43027d8b972fc3e34fb4232a13ca706dcb57aec3dae07bdc1c67bf33609"
        )
        .unwrap();
        let shared = hex::decode(
            "07fff4181ac6cc95ec1c16a94a0f74d12da232ce40a77552281d282bb60c0b56fd2464c335543936521c24403085d59a449a5037514a879d"
        )
        .unwrap();

        // alloc memory for generated keys
        let mut gen_pk_alice = vec![0u8; KEY_LEN];
        let mut gen_pk_bob = vec![0u8; KEY_LEN];
        let mut gen_shared_alice = vec![0u8; KEY_LEN];
        let mut gen_shared_bob = vec![0u8; KEY_LEN];

        // sanity size checks
        assert_eq!(pk_alice.len(), gen_pk_alice.len());
        assert_eq!(pk_bob.len(), gen_pk_bob.len());
        assert_eq!(shared.len(), gen_shared_alice.len());
        assert_eq!(shared.len(), gen_shared_bob.len());

        // call C code
        unsafe {
            x448_derive_public_key(
                &mut (gen_pk_alice[0]) as *mut u8,
                &(sk_alice[0]) as *const u8,
            );
            x448_derive_public_key(&mut (gen_pk_bob[0]) as *mut u8, &(sk_bob[0]) as *const u8);
            let ret_alice = x448_int(
                &mut (gen_shared_alice[0]) as *mut u8,
                &(gen_pk_bob[0]) as *const u8,
                &(sk_alice[0]) as *const u8,
            );
            assert_eq!(ret_alice, _SUCCESS);
            let ret_bob = x448_int(
                &mut (gen_shared_bob[0]) as *mut u8,
                &(gen_pk_alice[0]) as *const u8,
                &(sk_bob[0]) as *const u8,
            );
            assert_eq!(ret_bob, _SUCCESS);
        }

        // test Alice public key
        assert_eq!(pk_alice, gen_pk_alice);

        // test Bob public key
        assert_eq!(pk_bob, gen_pk_bob);

        // test shared, Alice view
        assert_eq!(shared, gen_shared_alice);

        // test shared, Bob view
        assert_eq!(shared, gen_shared_bob);
    }
}
